"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
suite('Props Directive', () => {
    test('it can format props on many lines', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`
            @props(['hello', 'world'])
            
            <div>
            <div>
            @props(['hello', 'world', 'test' => [1,2,3,4,5, 'more' => ['hello', 'world', 'test' => [1,2,3,4,5]]]])
                                                                        </div>
                                            </div>
            
            <div>
            <p>Hello {{ $world }}!  </p>
                </div>`).trim(), `@props([
    "hello",
    "world",
])

<div>
    <div>
        @props([
            "hello",
            "world",
            "test" => [
                1,
                2,
                3,
                4,
                5,
                "more" => [
                    "hello",
                    "world",
                    "test" => [
                        1,
                        2,
                        3,
                        4,
                        5,
                    ],
                ],
            ],
        ])
    </div>
</div>

<div>
    <p>Hello {{ $world }}!</p>
</div>`);
    });
    test('it formats document with props', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`<x-icon


            :class="Arr::toCssClasses(['...'])" 
            
            
            
            
            />

@props(

       [           'icon'
       
       
       
                   ]
       
       
       )

<div>
<x-icon                      @class([$icon,              'pe-2'] )
                                   />
           {{ $slot }}



           
       </div>`).trim(), `<x-icon :class="Arr::toCssClasses(['...'])" />

@props([
    "icon",
])

<div>
    <x-icon @class([$icon, "pe-2"]) />
    {{ $slot }}
</div>`);
    });
});
//# sourceMappingURL=formatter_props_directive.test.js.map