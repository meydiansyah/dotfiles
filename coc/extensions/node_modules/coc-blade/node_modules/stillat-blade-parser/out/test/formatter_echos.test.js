"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const utils_1 = require("../formatting/prettier/utils");
suite('Echo Formatting', () => {
    test('it formats valid PHP code', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)('{{$test   +$that}}').trim(), '{{ $test + $that }}');
    });
    test('it formats valid PHP code in {!!', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)('{!!$test   +$that!!}').trim(), '{!! $test + $that !!}');
    });
    test('it formats valid PHP code in {{{', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)('{{{$test   +$that}}}').trim(), '{{{ $test + $that }}}');
    });
    test('it ingores invalid PHP code', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)('{{$test   $+++$that}}').trim(), '{{ $test   $+++$that }}');
    });
    test('it ignores invalid PHP code in {!!', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)('{!!$test   $+++$that!!}').trim(), '{!! $test   $+++$that !!}');
    });
    test('it ignores invalid PHP code in {{{', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)('{{{$test   $+++$that}}}').trim(), '{{{ $test   $+++$that }}}');
    });
    test('test formatting inline echo arrays does not add extra whitespace', () => {
        const input = `<a
href="#"
target="_blank"
{{ $attributes->merge(["class" => "rounded transition focus-visible:outline-none focus-visible:ring focus-visible:ring-red-600"]) }}
>
Some link
</a>`;
        const expected = `<a
    href="#"
    target="_blank"
    {{ $attributes->merge(["class" => "rounded transition focus-visible:outline-none focus-visible:ring focus-visible:ring-red-600"]) }}
>
    Some link
</a>`;
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(input).trim(), expected);
    });
    test('it can format inline echos as text', () => {
        assert_1.default.strictEqual((0, utils_1.formatBladeString)(`
            <p>test {{ $title }} test
            
            asdfasdf </p>

            <p>
        {{ $test }}
        </p>`).trim(), `<p>test {{ $title }} test asdfasdf</p>

<p>
    {{ $test }}
</p>`);
    });
});
//# sourceMappingURL=formatter_echos.test.js.map