import { TransformOptions } from '../document/transformOptions';
import { PhpFormatter, BlockPhpFormatter, PhpTagFormatter, JsonFormatter, HtmlFormatter, PreFormatter } from '../document/formatters';
import { BladeDocument } from '../document/bladeDocument';
import { FormattingOptions } from './formattingOptions';
export declare class DocumentFormatter {
    private formattingOptions;
    private transformOptions;
    private htmlFormatter;
    private phpFormatter;
    private blockPhpFormatter;
    private phpTagFormatter;
    private jsonFormatter;
    private preFormatter;
    withTransformOptions(options: TransformOptions): this;
    withFormattingOptions(options: FormattingOptions | null): this;
    withPreFormatter(formatter: PreFormatter): this;
    withHtmlFormatter(formatter: HtmlFormatter): this;
    withPhpFormatter(formatter: PhpFormatter): this;
    withBlockPhpFormatter(formatter: BlockPhpFormatter): this;
    withPhpTagFormatter(formatter: PhpTagFormatter): this;
    withJsonFormatter(formatter: JsonFormatter): this;
    formatText(text: string): string;
    formatDocument(document: BladeDocument): string;
}
//# sourceMappingURL=documentFormatter.d.ts.map