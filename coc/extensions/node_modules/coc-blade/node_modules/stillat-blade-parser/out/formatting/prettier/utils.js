"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatTagPhp = exports.formatPhp = exports.inlineFormatPhp = exports.formatAsHtml = exports.setOptions = exports.formatBladeString = exports.formatJson = exports.getHtmlOptions = exports.cleanOptions = void 0;
const prettier_1 = __importDefault(require("prettier"));
const plugin = __importStar(require("./plugin"));
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const standalone_1 = __importDefault(require("@prettier/plugin-php/standalone"));
const lib_1 = require("@stedi/prettier-plugin-jsonata/dist/lib");
let phpOptions, htmlOptions, echoPhpOptions;
function cleanOptions(options) {
    [
        "cursorOffset",
        "rangeEnd",
        "rangeStart",
        "locEnd",
        "locStat",
        "printer",
        "originalText",
        "astFormat",
    ].forEach((p) => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        delete options[p];
    });
    return options;
}
exports.cleanOptions = cleanOptions;
function getHtmlOptions() {
    return htmlOptions;
}
exports.getHtmlOptions = getHtmlOptions;
function formatJson(text) {
    return (0, lib_1.formatJsonata)(text, {
        printWidth: 20
    });
}
exports.formatJson = formatJson;
function formatBladeString(text) {
    return prettier_1.default.format(text, {
        parser: 'blade',
        plugins: [plugin]
    });
}
exports.formatBladeString = formatBladeString;
function setOptions(options) {
    htmlOptions = cleanOptions(Object.assign({}, options, { htmlWhitespaceSensitivity: "ignore", parser: "html", plugins: options.plugins }));
    phpOptions = cleanOptions(Object.assign({}, options, {
        parser: 'php',
        plugins: [standalone_1.default],
    }));
    echoPhpOptions = cleanOptions(Object.assign({}, options, {
        parser: 'php',
        plugins: [standalone_1.default],
        printWidth: 300,
    }));
}
exports.setOptions = setOptions;
function formatAsHtml(text) {
    return prettier_1.default.format(text, htmlOptions);
}
exports.formatAsHtml = formatAsHtml;
function inlineFormatPhp(text) {
    let result = prettier_1.default.format(text, echoPhpOptions).trim();
    result = result.substring(5);
    if (text.endsWith(';') == false && result.endsWith(';')) {
        result = result.substring(0, result.length - 1);
    }
    return result.trim();
}
exports.inlineFormatPhp = inlineFormatPhp;
function formatPhp(text) {
    let result = prettier_1.default.format(text, phpOptions).trim();
    result = result.substring(5);
    if (text.endsWith(';') == false && result.endsWith(';')) {
        result = result.substring(0, result.length - 1);
    }
    return result.trim();
}
exports.formatPhp = formatPhp;
function formatTagPhp(text) {
    const result = prettier_1.default.format(text, phpOptions).trim();
    return result.trim();
}
exports.formatTagPhp = formatTagPhp;
//# sourceMappingURL=utils.js.map