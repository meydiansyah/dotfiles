"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEnvSettings = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const commonEventShortcuts_1 = require("../parser/excludeDirectives/commonEventShortcuts");
const cssAtRules_1 = require("../parser/excludeDirectives/cssAtRules");
const BLADE_CONFIG_FILE = '.blade.format.json';
const defaultSettings = {
    ignoreDirectives: [
        ...cssAtRules_1.CssAtRules,
        ...commonEventShortcuts_1.CommonEventShortcuts
    ],
    spacesAfterDirective: 0,
    tabSize: 4,
    formatDirectiveJsonParameters: true,
    formatDirectivePhpParameters: true,
    customIfs: [],
    directives: []
};
function getEnvSettings(startingDirectory) {
    const settingsFile = findSettingsFile(startingDirectory);
    if (settingsFile == null) {
        return defaultSettings;
    }
    if (fs.existsSync(settingsFile) == false) {
        return defaultSettings;
    }
    const optionContents = fs.readFileSync(settingsFile, { encoding: 'utf8' });
    try {
        const parsedFile = JSON.parse(optionContents);
        let ignoreDirectives = cssAtRules_1.CssAtRules, spacesAfterDirective = 0, tabSize = 4, formatDirectivePhpParameters = true, formatDirectiveJsonParameters = true, customIfs = [], directives = [];
        if (typeof parsedFile.ignoreDirectives !== 'undefined' && parsedFile.ignoreDirectives !== null) {
            ignoreDirectives = parsedFile.ignoreDirectives;
        }
        if (typeof parsedFile.spacesAfterDirective !== 'undefined' && parsedFile.spacesAfterDirective !== null) {
            spacesAfterDirective = parsedFile.spacesAfterDirective;
        }
        if (typeof parsedFile.tabSize !== 'undefined' && parsedFile.tabSize !== null) {
            tabSize = parsedFile.tabSize;
        }
        if (typeof parsedFile.formatDirectivePhpParameters !== 'undefined' && parsedFile.formatDirectivePhpParameters !== null) {
            formatDirectivePhpParameters = parsedFile.formatDirectivePhpParameters;
        }
        if (typeof parsedFile.formatDirectiveJsonParameters !== 'undefined' && parsedFile.formatDirectiveJsonParameters !== null) {
            formatDirectiveJsonParameters = parsedFile.formatDirectiveJsonParameters;
        }
        if (typeof parsedFile.customIfs !== 'undefined' && parsedFile.customIfs !== null) {
            customIfs = parsedFile.customIfs;
        }
        if (typeof parsedFile.directives !== 'undefined' && parsedFile.directives !== null) {
            directives = parsedFile.directives;
        }
        if (spacesAfterDirective < 0) {
            spacesAfterDirective = 0;
        }
        if (spacesAfterDirective > 3) {
            spacesAfterDirective = 3;
        }
        return {
            ignoreDirectives: ignoreDirectives,
            spacesAfterDirective: spacesAfterDirective,
            tabSize: tabSize,
            formatDirectivePhpParameters: formatDirectivePhpParameters,
            formatDirectiveJsonParameters: formatDirectiveJsonParameters,
            customIfs: customIfs,
            directives: directives
        };
    }
    catch (err) {
        console.log(err);
    }
    return defaultSettings;
}
exports.getEnvSettings = getEnvSettings;
function findSettingsFile(startingDirectory) {
    let searchPath = path.dirname(startingDirectory);
    if (searchPath == '.') {
        searchPath = process.cwd();
    }
    const parts = searchPath.split(path.sep);
    while (parts.length > 0) {
        const newPath = parts.join(path.sep), formatFileCandidate = path.join(newPath, BLADE_CONFIG_FILE);
        if (fs.existsSync(formatFileCandidate)) {
            return formatFileCandidate;
        }
        parts.pop();
    }
    return null;
}
//# sourceMappingURL=optionDiscovery.js.map